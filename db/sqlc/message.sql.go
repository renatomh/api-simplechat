// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  chat_id,
  from_user_id,
  to_user_id,
  body
) VALUES (
  $1, $2, $3, $4
) RETURNING id, chat_id, from_user_id, to_user_id, body, sent_at
`

type CreateMessageParams struct {
	ChatID     int64  `json:"chat_id"`
	FromUserID int64  `json:"from_user_id"`
	ToUserID   int64  `json:"to_user_id"`
	Body       string `json:"body"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ChatID,
		arg.FromUserID,
		arg.ToUserID,
		arg.Body,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Body,
		&i.SentAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, chat_id, from_user_id, to_user_id, body, sent_at FROM messages
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Body,
		&i.SentAt,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, chat_id, from_user_id, to_user_id, body, sent_at FROM messages
WHERE chat_id = $1
ORDER BY sent_at DESC
LIMIT $2
OFFSET $3
`

type ListMessagesParams struct {
	ChatID int64 `json:"chat_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, arg.ChatID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Body,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
