// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/renatomh/api-simplechat/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/renatomh/api-simplechat/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AcceptContact mocks base method.
func (m *MockStore) AcceptContact(arg0 context.Context, arg1 int64) (db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptContact", arg0, arg1)
	ret0, _ := ret[0].(db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptContact indicates an expected call of AcceptContact.
func (mr *MockStoreMockRecorder) AcceptContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptContact", reflect.TypeOf((*MockStore)(nil).AcceptContact), arg0, arg1)
}

// ChangeUserPassword mocks base method.
func (m *MockStore) ChangeUserPassword(arg0 context.Context, arg1 db.ChangeUserPasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockStoreMockRecorder) ChangeUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockStore)(nil).ChangeUserPassword), arg0, arg1)
}

// CheckExistingContact mocks base method.
func (m *MockStore) CheckExistingContact(arg0 context.Context, arg1 db.CheckExistingContactParams) ([]db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingContact", arg0, arg1)
	ret0, _ := ret[0].([]db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistingContact indicates an expected call of CheckExistingContact.
func (mr *MockStoreMockRecorder) CheckExistingContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingContact", reflect.TypeOf((*MockStore)(nil).CheckExistingContact), arg0, arg1)
}

// CreateChat mocks base method.
func (m *MockStore) CreateChat(arg0 context.Context, arg1 db.CreateChatParams) (db.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0, arg1)
	ret0, _ := ret[0].(db.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockStoreMockRecorder) CreateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockStore)(nil).CreateChat), arg0, arg1)
}

// CreateContact mocks base method.
func (m *MockStore) CreateContact(arg0 context.Context, arg1 db.CreateContactParams) (db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0, arg1)
	ret0, _ := ret[0].(db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockStoreMockRecorder) CreateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockStore)(nil).CreateContact), arg0, arg1)
}

// CreateMessage mocks base method.
func (m *MockStore) CreateMessage(arg0 context.Context, arg1 db.CreateMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockStoreMockRecorder) CreateMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockStore)(nil).CreateMessage), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteChat mocks base method.
func (m *MockStore) DeleteChat(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockStoreMockRecorder) DeleteChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockStore)(nil).DeleteChat), arg0, arg1)
}

// DeleteContact mocks base method.
func (m *MockStore) DeleteContact(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockStoreMockRecorder) DeleteContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockStore)(nil).DeleteContact), arg0, arg1)
}

// DeleteMessage mocks base method.
func (m *MockStore) DeleteMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockStoreMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockStore)(nil).DeleteMessage), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetChat mocks base method.
func (m *MockStore) GetChat(arg0 context.Context, arg1 int64) (db.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", arg0, arg1)
	ret0, _ := ret[0].(db.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockStoreMockRecorder) GetChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockStore)(nil).GetChat), arg0, arg1)
}

// GetContact mocks base method.
func (m *MockStore) GetContact(arg0 context.Context, arg1 int64) (db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0, arg1)
	ret0, _ := ret[0].(db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockStoreMockRecorder) GetContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockStore)(nil).GetContact), arg0, arg1)
}

// GetMessage mocks base method.
func (m *MockStore) GetMessage(arg0 context.Context, arg1 int64) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockStoreMockRecorder) GetMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockStore)(nil).GetMessage), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// ListAcceptedContacts mocks base method.
func (m *MockStore) ListAcceptedContacts(arg0 context.Context, arg1 db.ListAcceptedContactsParams) ([]db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceptedContacts", arg0, arg1)
	ret0, _ := ret[0].([]db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceptedContacts indicates an expected call of ListAcceptedContacts.
func (mr *MockStoreMockRecorder) ListAcceptedContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedContacts", reflect.TypeOf((*MockStore)(nil).ListAcceptedContacts), arg0, arg1)
}

// ListChats mocks base method.
func (m *MockStore) ListChats(arg0 context.Context, arg1 db.ListChatsParams) ([]db.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChats", arg0, arg1)
	ret0, _ := ret[0].([]db.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChats indicates an expected call of ListChats.
func (mr *MockStoreMockRecorder) ListChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChats", reflect.TypeOf((*MockStore)(nil).ListChats), arg0, arg1)
}

// ListContacts mocks base method.
func (m *MockStore) ListContacts(arg0 context.Context, arg1 db.ListContactsParams) ([]db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0, arg1)
	ret0, _ := ret[0].([]db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockStoreMockRecorder) ListContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockStore)(nil).ListContacts), arg0, arg1)
}

// ListMessages mocks base method.
func (m *MockStore) ListMessages(arg0 context.Context, arg1 db.ListMessagesParams) ([]db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockStoreMockRecorder) ListMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockStore)(nil).ListMessages), arg0, arg1)
}

// ListPendingContacts mocks base method.
func (m *MockStore) ListPendingContacts(arg0 context.Context, arg1 db.ListPendingContactsParams) ([]db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingContacts", arg0, arg1)
	ret0, _ := ret[0].([]db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingContacts indicates an expected call of ListPendingContacts.
func (mr *MockStoreMockRecorder) ListPendingContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingContacts", reflect.TypeOf((*MockStore)(nil).ListPendingContacts), arg0, arg1)
}

// ListRejectedContacts mocks base method.
func (m *MockStore) ListRejectedContacts(arg0 context.Context, arg1 db.ListRejectedContactsParams) ([]db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRejectedContacts", arg0, arg1)
	ret0, _ := ret[0].([]db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRejectedContacts indicates an expected call of ListRejectedContacts.
func (mr *MockStoreMockRecorder) ListRejectedContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRejectedContacts", reflect.TypeOf((*MockStore)(nil).ListRejectedContacts), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.ListUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// RejectContact mocks base method.
func (m *MockStore) RejectContact(arg0 context.Context, arg1 int64) (db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectContact", arg0, arg1)
	ret0, _ := ret[0].(db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectContact indicates an expected call of RejectContact.
func (mr *MockStoreMockRecorder) RejectContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectContact", reflect.TypeOf((*MockStore)(nil).RejectContact), arg0, arg1)
}

// UpdateChat mocks base method.
func (m *MockStore) UpdateChat(arg0 context.Context, arg1 int64) (db.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", arg0, arg1)
	ret0, _ := ret[0].(db.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockStoreMockRecorder) UpdateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockStore)(nil).UpdateChat), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
